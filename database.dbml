

Project BlogServer {
  database_type: 'PostgreSQL'
  Note: '''
    # Blog Server Database
    **A database design for a Blog application like Medium.**
  '''
}


Table users as U {
    id int [pk, increment]
    first_name varchar 
    last_name varchar
    created_at timestamp
    hash   varchar
    is_social_auth bool
    is_email_verified bool
    auth_type Provider
    avatar int [ref: > Media.id ]
    note: "Table 'users' contains information about each user in the system. . "
}


Enum Provider {
    email
    google
    facebook
    twitter
}

 Table MediaFile as  Media {
    id int [pk, increment]
    url varchar 
    key varchar 
    type MediaType
    size int 
    note: "Using a media file to store and recieve information for S3 bucket or FirebaseStorage."
 }

    Enum MediaType {
        video
        image
        audio
    }


Table posts as P  {
    id int [pk, increment]
    author_id int [ref: > U.id] 
    title varchar
    description varchar
    post_content varchar
    is_deleted bool [default: false]
    created_at datetime
    background_image int [ref: > Media.id]
    note: "Table 'posts' contains information about each post created."
    
}
 Table PostReactions as PR {
    id int [pk, increment]
    post_id int [ref: > P.id]
    reaction_type ReactionType [default: null]
    
 }



Table comments as C {
    id int [pk, increment]
    post_id int [ref: > P.id]
    author_id int 
    comment_content varchar
    is_deleted bool [default: false]
    note: "Table 'comments' contains information about each comment created for a post"
}

Table comments_likes {
    comment_id int [ref: > C.id]
    liker_id int [ref: > U.id]
    
}


    Table subscribers {
        subscriber_id int [not null]
        user_id int [ref: > U.id]
        created_at  timestamp [default: `now()`]
    }



    Enum ReactionType {
        love
        like
        wow
        angry

    }


    Table profile {
        id int [ref: > U.id]
        first_name varchar [ref: > U.first_name]
        last_name varchar [ref: > U.last_name]
        subscribers_count int 
        bio varchar [default: null]
        hash   varchar
        is_social_auth bool
        is_email_verified bool 
        auth_type Provider [ref: > U.auth_type]
        avatar int [ref: > U.avatar ]
        
    }

Ref : C.author_id > U.id