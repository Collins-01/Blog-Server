// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @unique @default(cuid())
  email            String       @unique
  hash             String?
  firstName        String
  lastName         String
  provider         Provider     @default(email)
  isSocialAuth     Boolean      @default(false)
  isEmailConfirmed Boolean      @default(false)
  bio              String       @default("")
  posts            Post[]
  subscribers      Subscriber[]
  comment          Comment[]

  @@map("users")
}

enum Provider {
  email
  google
  facebook
  apple
}

model Profile {
  id String @unique @default(cuid())
}

model Post {
  id          String    @unique @default(cuid())
  title       String
  description String
  // backgroundImage MediaFile 
  content     String
  hashTags    String[]
  views       Int?      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorID    String
  user        User      @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @unique @default(cuid())
  comment   String
  postID    String
  author    String //FirstName + Lastname
  authorID  String
  user      User     @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postID], references: [id])

  @@map("comments")
}

model MediaFile {
  // id  String @unique @default(cuid())
  key String @unique
  url String
  // authorID String
  // user     User   @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  type MeidaFileType

  @@map("mediafiles")
}

enum MeidaFileType {
  image
  video
}

model Subscriber {
  id             String @unique @default(cuid())
  authorID       String
  subscriberID   String @unique
  subscriberName String
  user           User   @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("subscribers")
}
