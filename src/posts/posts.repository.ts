import { Injectable, NotFoundException } from '@nestjs/common';
import DatabaseService from 'src/database/database.service';
import { PageOptions } from 'src/types/pagination';
import { CreatePostDto } from './dto/create-post.dto';
import PostModel from './models/post.model';

@Injectable()
export default class PostsRepository {
  constructor(private readonly databaseService: DatabaseService) {}

  async getAllPosts(pageOptions: PageOptions, idsToSkip = 0) {
    const response = await this.databaseService.runQuery(
      `
    WITH selected_posts AS
    (SELECT * FROM posts
    WHERE id > $3
    ORDER BY id ASC
    OFFSET $1
    LIMIT $2
    ),
    total_posts_count_response AS  (
        SELECT COUNT (*)::int  AS total_posts_counts FROM posts
    )

    SELECT * FROM selected_posts, total_posts_count_response
    `,
      [pageOptions.offset, pageOptions.limit, idsToSkip],
    );
    const items = response.rows.map(
      (databaseRow) => new PostModel(databaseRow),
    );
    const count = response.rows[0]?.total_posts_count || 0;
    return {
      items,
      count,
    };
  }

  async createPost(dto: CreatePostDto, authorId: number) {
    const response = await this.databaseService.runQuery(
      ` 
      INSERT INTO  posts  
      (
        title,
        post_content,
        author_id,
        description,
        background_image
      )

      VALUES ($1, $2, $3, $4, $5)

      RETURNING * 
      `,
      [dto.title, dto.content, authorId, dto.description, dto.backgroundImage],
    );
    console.log(response.rows[0]);
    return new PostModel(response.rows[0]);
  }

  async deletePost(id: number, userId: number) {
    const response = await this.databaseService.runQuery(
      `
      DELETE FROM posts
      WHERE id = $1 AND author_id = $2

      
    `,
      [id, userId],
    );
    if (response.rowCount === 0) {
      throw new NotFoundException();
    }
  }

  async findPostById(id: number) {
    const response = await this.databaseService.runQuery(
      `
    SELECT * FROM posts
    WHERE id = $1
    `,
      [id],
    );
    console.log(`Response from getting single post: ${response.rows}`);
    if (!response.rows[0]) {
      throw new NotFoundException('Post does not exist.');
    }
    return new PostModel(response.rows[0]);
  }

  async getAllPostsForUser(
    pageOptions: PageOptions,
    idsToSkip = 0,
    userId: number,
  ) {
    const response = await this.databaseService.runQuery(
      `
    WITH selected_posts AS
    (
      SELECT * FROM posts
      WHERE id > $3 AND author_id = $4
      ORDER BY id ASC
      OFFSET $1
      LIMIT $2
    ),
    total_posts_count_response AS  (
        SELECT COUNT (*)::int  AS total_posts_counts FROM posts
    )

    SELECT * FROM selected_posts, total_posts_count_response
    `,
      [pageOptions.offset, pageOptions.limit, idsToSkip, userId],
    );
    const items = response.rows.map(
      (databaseRow) => new PostModel(databaseRow),
    );
    const count = response.rows[0]?.total_posts_count || 0;
    return {
      items,
      count,
    };
  }
}

/*
import { Knex } from "knex";

export async function up(knex: Knex): Promise<void> {
    return knex.raw(`
     CREATE TABLE posts  (
      id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      title text NOT NULL,
      post_content text NOT NULL,
      author_id int NOT NULL,
      background_image text NOT NULL,
      description text NOT NULL
     )
     
      
    `);
  }
  
  export async function down(knex: Knex): Promise<void> {
    return knex.raw(`
      DROP TABLE posts
    `);
  }
  
*/
